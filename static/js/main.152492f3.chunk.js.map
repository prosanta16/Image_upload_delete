{"version":3,"sources":["component/UploadIcon.svg","component/index.js","App.js","reportWebVitals.js","index.js"],"names":["styles","display","alignItems","justifyContent","flexWrap","width","ERROR","ReactImageUploadComponent","props","state","pictures","defaultImages","files","fileErrors","inputElement","onDropFile","bind","onUploadClick","triggerFileUpload","prevProps","prevState","snapshot","this","onChange","nextProps","setState","fileName","pattern","imgExtension","join","replace","RegExp","test","e","target","allFilePromises","i","length","file","fileError","name","hasExtension","size","maxFileSize","Object","assign","type","push","readFile","singleImage","Promise","all","then","newFilesData","dataURLs","slice","forEach","newFileData","dataURL","value","resolve","reject","reader","FileReader","onload","result","readAsDataURL","picture","removeIndex","findIndex","filteredPictures","filter","index","filteredFiles","map","className","errorClass","style","errorStyle","fileSizeError","fileTypeError","withIcon","src","UploadIcon","alt","withLabel","labelClass","labelStyles","label","enterAnimation","leaveAnimation","renderPreviewPictures","onClick","removeImage","click","fileContainerStyle","renderIcon","renderLabel","renderErrors","buttonType","buttonClassName","buttonStyles","buttonText","ref","input","multiple","accept","withPreview","renderPreview","React","Component","defaultProps","App","maxWidth","margin","PureComponent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.152492f3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/UploadIcon.469126df.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './index.css';\nimport FlipMove from 'react-flip-move';\nimport UploadIcon from './UploadIcon.svg';\n\nconst styles = {\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  flexWrap: \"wrap\",\n  width: \"100%\"\n};\n\nconst ERROR = {\n  NOT_SUPPORTED_EXTENSION: 'NOT_SUPPORTED_EXTENSION',\n  FILESIZE_TOO_LARGE: 'FILESIZE_TOO_LARGE'\n}\n\nclass ReactImageUploadComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pictures: [...props.defaultImages],\n      files: [],\n      fileErrors: []\n    };\n    this.inputElement = '';\n    this.onDropFile = this.onDropFile.bind(this);\n    this.onUploadClick = this.onUploadClick.bind(this);\n    this.triggerFileUpload = this.triggerFileUpload.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot){\n    if(prevState.files !== this.state.files){\n      this.props.onChange(this.state.files, this.state.pictures);\n    }\n  }\n\n  /*\n   Load image at the beggining if defaultImage prop exists\n   */\n  componentWillReceiveProps(nextProps){\n    if(nextProps.defaultImages !== this.props.defaultImages){\n      this.setState({pictures: nextProps.defaultImages});\n    }\n  }\n\n  /*\n\t Check file extension (onDropFile)\n\t */\n  hasExtension(fileName) {\n    const pattern = '(' + this.props.imgExtension.join('|').replace(/\\./g, '\\\\.') + ')$';\n    return new RegExp(pattern, 'i').test(fileName);\n  }\n\n  /*\n   Handle file validation\n   */\n  onDropFile(e) {\n    const files = e.target.files;\n    const allFilePromises = [];\n    const fileErrors = [];\n\n    // Iterate over all uploaded files\n    for (let i = 0; i < files.length; i++) {\n      let file = files[i];\n      let fileError = {\n        name: file.name,\n      };\n      // Check for file extension\n      if (!this.hasExtension(file.name)) {\n        fileError = Object.assign(fileError, {\n          type: ERROR.NOT_SUPPORTED_EXTENSION\n        });\n        fileErrors.push(fileError);\n        continue;\n      }\n      // Check for file size\n      if(file.size > this.props.maxFileSize) {\n        fileError = Object.assign(fileError, {\n          type: ERROR.FILESIZE_TOO_LARGE\n        });\n        fileErrors.push(fileError);\n        continue;\n      }\n\n      allFilePromises.push(this.readFile(file));\n    }\n\n    this.setState({\n      fileErrors\n    });\n\n    const {singleImage} = this.props;\n\n    Promise.all(allFilePromises).then(newFilesData => {\n      const dataURLs = singleImage?[]:this.state.pictures.slice();\n      const files = singleImage?[]:this.state.files.slice();\n\n      newFilesData.forEach(newFileData => {\n        dataURLs.push(newFileData.dataURL);\n        files.push(newFileData.file);\n      });\n\n      this.setState({pictures: dataURLs, files: files});\n    });\n  }\n\n  onUploadClick(e) {\n    // Fixes https://github.com/JakeHartnell/react-images-upload/issues/55\n    e.target.value = null;\n  }\n\n  /*\n     Read a file and return a promise that when resolved gives the file itself and the data URL\n   */\n  readFile(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      // Read the image via FileReader API and save image result in state.\n      reader.onload = function (e) {\n        // Add the file name to the data URL\n        let dataURL = e.target.result;\n        dataURL = dataURL.replace(\";base64\", `;name=${file.name};base64`);\n        resolve({file, dataURL});\n      };\n\n      reader.readAsDataURL(file);\n    });\n  }\n\n  /*\n   Remove the image from state\n   */\n  removeImage(picture) {\n    const removeIndex = this.state.pictures.findIndex(e => e === picture);\n    const filteredPictures = this.state.pictures.filter((e, index) => index !== removeIndex);\n    const filteredFiles = this.state.files.filter((e, index) => index !== removeIndex);\n\n    this.setState({pictures: filteredPictures, files: filteredFiles}, () => {\n      this.props.onChange(this.state.files, this.state.pictures);\n    });\n  }\n\n  /*\n   Check if any errors && render\n   */\n  renderErrors() {\n    const { fileErrors } = this.state;\n    return fileErrors.map((fileError, index) => {\n      return (\n        <div className={'errorMessage ' + this.props.errorClass} key={index} style={this.props.errorStyle}>\n          * {fileError.name} {fileError.type === ERROR.FILESIZE_TOO_LARGE ? this.props.fileSizeError: this.props.fileTypeError}\n        </div>\n      );\n    });\n  }\n\n  /*\n   Render the upload icon\n   */\n  renderIcon() {\n    if (this.props.withIcon) {\n      return <img src={UploadIcon} className=\"uploadIcon\"\talt=\"Upload Icon\" />;\n    }\n  }\n\n  /*\n   Render label\n   */\n  renderLabel() {\n    if (this.props.withLabel) {\n      return <p className={this.props.labelClass} style={this.props.labelStyles}>{this.props.label}</p>\n    }\n  }\n\n  /*\n   Render preview images\n   */\n  renderPreview() {\n    return (\n      <div className=\"uploadPicturesWrapper\">\n        <FlipMove enterAnimation=\"fade\" leaveAnimation=\"fade\" style={styles}>\n          {this.renderPreviewPictures()}\n        </FlipMove>\n      </div>\n    );\n  }\n\n  renderPreviewPictures() {\n    return this.state.pictures.map((picture, index) => {\n      return (\n        <div key={index} className=\"uploadPictureContainer\">\n          <div className=\"deleteImage\" onClick={() => this.removeImage(picture)}>X</div>\n          <img src={picture} className=\"uploadPicture\" alt=\"preview\"/>\n        </div>\n      );\n    });\n  }\n\n  /*\n   On button click, trigger input file to open\n   */\n  triggerFileUpload() {\n    this.inputElement.click();\n  }\n\n  clearPictures() {\n    this.setState({pictures: []})\n  }\n\n  render() {\n    return (\n      <div className={\"fileUploader \" + this.props.className} style={this.props.style}>\n        <div className=\"fileContainer\" style={this.props.fileContainerStyle}>\n          {this.renderIcon()}\n          {this.renderLabel()}\n          <div className=\"errorsContainer\">\n            {this.renderErrors()}\n          </div>\n          <button\n            type={this.props.buttonType}\n            className={\"chooseFileButton \" + this.props.buttonClassName}\n            style={this.props.buttonStyles}\n            onClick={this.triggerFileUpload}\n          >\n            {this.props.buttonText}\n          </button>\n          <input\n            type=\"file\"\n            ref={input => this.inputElement = input}\n            name={this.props.name}\n            multiple={!this.props.singleImage}\n            onChange={this.onDropFile}\n            onClick={this.onUploadClick}\n            accept={this.props.accept}\n          />\n          { this.props.withPreview ? this.renderPreview() : null }\n        </div>\n      </div>\n    )\n  }\n}\n\nReactImageUploadComponent.defaultProps = {\n  className: '',\n  fileContainerStyle: {},\n  buttonClassName: \"\",\n  buttonStyles: {},\n  withPreview: false,\n  accept: \"image/*\",\n  name: \"\",\n  withIcon: true,\n  buttonText: \"Choose images\",\n  buttonType: \"button\",\n  withLabel: true,\n  label: \"Max file size: 5mb, accepted: jpg|gif|png\",\n  labelStyles: {},\n  labelClass: \"\",\n  imgExtension: ['.jpg', '.jpeg', '.gif', '.png'],\n  maxFileSize: 5242880,\n  fileSizeError: \" file size is too big\",\n  fileTypeError: \" is not a supported file extension\",\n  errorClass: \"\",\n  style: {},\n  errorStyle: {},\n  singleImage: false,\n  onChange: () => {},\n  defaultImages: []\n};\n\nReactImageUploadComponent.propTypes = {\n  style: PropTypes.object,\n  fileContainerStyle: PropTypes.object,\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n  onDelete: PropTypes.func,\n  buttonClassName: PropTypes.string,\n  buttonStyles: PropTypes.object,\n  buttonType: PropTypes.string,\n  withPreview: PropTypes.bool,\n  accept: PropTypes.string,\n  name: PropTypes.string,\n  withIcon: PropTypes.bool,\n  buttonText: PropTypes.string,\n  withLabel: PropTypes.bool,\n  label: PropTypes.string,\n  labelStyles: PropTypes.object,\n  labelClass: PropTypes.string,\n  imgExtension: PropTypes.array,\n  maxFileSize: PropTypes.number,\n  fileSizeError: PropTypes.string,\n  fileTypeError: PropTypes.string,\n  errorClass: PropTypes.string,\n  errorStyle: PropTypes.object,\n  singleImage: PropTypes.bool,\n  defaultImages: PropTypes.array\n};\n\nexport default ReactImageUploadComponent;\n","import React from 'react';\nimport ImageUploader from './component/index.js';\n\n\n\n\nexport default class App extends React.PureComponent {\n    render() {\n        return (\n            <div className=\"page\">\n                <ImageUploader style={{ maxWidth: '500px', margin: \"20px auto\" }}\n                               withPreview={true} />\n             \n            </div>\n        );\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}